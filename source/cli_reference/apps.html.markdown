
## Apps

Apps are the core data pipeline that defines the stages of processing the data. See [Quickstart - Apps](/quickstart/apps) for an overview of apps. 

  ```bash
$ zillabyte help apps
Usage: zillabyte apps

 List custom apps.

  apps                           #  List custom apps.
  apps:cycles ID [OPTIONS]       #  Operations on the app's cycles.
  apps:delete ID                 #  Deletes an app. If the app is running, this command will kill it.
  apps:details ID                #  List details for an app, including percentage complete, if the
  apps:errors ID                 #  Show recent errors generated by the app.
  apps:info [DIR]                #  Outputs the info for the app in the dir.
  apps:init [NAME]               #  Initializes a new app.
  apps:kill ID                   #  Kills the given app.
  apps:logs ID [OPERATION_NAME]  #  Streams logs for the app from our cluster.
  apps:prep [DIR]                #  Performs any necessary initialization for the app.
  apps:pull ID DIR               #  Pulls an app source to a directory.
  apps:push [DIR]                #  Uploads an app.
  apps:test                      #  Tests a local app with sample data.
  ```

### apps:cycles 

``` bash
$ zillabyte help apps:cycles
Usage: zillabyte apps:cycles ID [OPTIONS]

 Operations on the app's cycles.
 With no options, the command lists the apps cycles.

 -n, --next                                  # Request the app to move to the next cycle
 -f, --forever                               # Automatically start new cycles when previous cycles ends
 ```

### apps:delete 

``` bash
$ zillabyte help apps:delete
Usage: zillabyte apps:delete ID

 Deletes an app. If the app is running, this command will kill it.

 -f, --force                                 # Don't ask for confirmation
```

### apps:details 

``` bash
$ zillabyte help apps:details
Usage: zillabyte apps:details ID

 List details for an app, including percentage complete, if the
 source is an existing dataset.
```

### apps:errors 

``` bash
$ zillabyte help apps:errors
Usage: zillabyte apps:errors ID

 Show recent errors generated by the app.
```

### apps:info 

``` bash
$ zillabyte help apps:info
Usage: zillabyte apps:info [DIR]

 Outputs the info for the app in the dir.

 --pretty                                    # Pretty prints the info output
 --directory DIR                             # App directory
```

### apps:init              
``` bash
$ zillabyte help apps:init
Usage: zillabyte apps:init [NAME]

 Initializes a new app.

 --lang LANG                                 # Specify which language to use (ruby, python) [default: 'ruby']
 --dir DIR                                   # Target directory of the app

 Examples:

 $ zillabyte apps:init contact_extractor --lang python
```

### apps:kill    

``` bash
$ zillabyte help apps:kill
Usage: zillabyte apps:kill ID

 Kills the given app.

 --config CONFIG_FILE                        # Use the given config file
```

### apps:logs

``` bash
$ zillabyte help apps:logs
Usage: zillabyte apps:logs ID [OPERATION_NAME]

 Streams logs for the app from our cluster.

 --operation OPERATION_NAME                  # Specify the operation to show logs for
 -v, --verbose LEVEL                         # Sets the verbosity (error, info, debug) [default: info]
```

### apps:prep

``` bash
$ zillabyte apps:prep
Usage: zillabyte apps:prep [DIR]

 Performs any necessary initialization for the app.

 --directory DIR                             # App directory
```

### apps:pull

``` bash
$ zillabyte help apps:pull
Usage: zillabyte apps:pull ID DIR

 Pulls an app source to a directory.

 --force                                     # Pulls even if the directory exists
 --directory DIR                             # App directory

 Examples:

 $ zillabyte apps:pull 27 .
```

### apps:test     
``` bash
$ zillabyte help apps:test
Usage: zillabyte apps:test

 Tests a local app with sample data.

 --config CONFIG_FILE                        # Use the given config file
 --output OUTPUT_FILE                        # Writes sink output to a file
 --cycles CYCLES                             # Number of cycles to emit [default: 1]
 --directory DIR                             # App directory
 -i, --interactive                           # Interactively control input and read output
```

