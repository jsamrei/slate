
## Components

Components are reusable operations that can be integrated within applications or called on demand. See [Quickstart - Components](/quickstart/components) for an overview of components. 

``` bash
$ zillabyte components
Usage: zillabyte components

 list custom components
 --output_type OUTPUT_TYPE     # specify an output type i.e. json


  components         #  list custom components
  components:delete  #  deletes a component.
  components:errors  #  show recent errors generated by the componeny rpc
  components:info    #  outputs the info for the component in the dir.
  components:init    #  initializes a new component
  components:kill    #  kills the given component rpc
  components:prep    #  performs any necessary initialization for the component
  components:pull    #  pulls a component source to a directory.
  components:results #  gets the result of an rpc request or current run status
  components:rpc     #  runs a component as an rpc
  components:status  #  fetches detailed status of the component
  components:test    #  tests a local component with sample data
```

### components:delete 

``` bash 
$ zillabyte components:delete
Usage: zillabyte components:delete ID

 deletes a component.
 -f, --force # don't ask for confirmation
 --output_type OUTPUT_TYPE # specify an output type i.e. json

 ``` 

### components:errors 

``` bash 
$ zillabyte components:errors
Usage: zillabyte components:errors ID

 show recent errors generated by the componeny rpc
 --output_type OUTPUT_TYPE           # specify an output type i.e. json

``` 

### components:info 

``` bash 
$ zillabyte components:info
Usage: zillabyte components:info [DIR]

 outputs the info for the component in the dir.

 --pretty # Pretty prints the info output
 --output_type OUTPUT_TYPE # specify an output type i.e. json
 --directory DIR # Directory of the component

``` 

### components:init

``` bash 
$ zillabyte components:init
Usage: zillabyte components:init [NAME]

 initializes a new component

 --lang LANG  # which language to use [ruby, python]. default 'ruby'.
 --dir DIR    # target directory of the app.

Examples:

 $ zillabyte components:init domain_extractor --lang ruby

``` 

### components:kill

``` bash 
$ zillabyte components:kill
Usage: zillabyte components:kill ID

 kills the given component rpc

 --config CONFIG_FILE # use the given config file
 --output_type OUTPUT_TYPE # specify an output type i.e. json

``` 

### components:prep

``` bash 
$ zillabyte components:prep
Usage: zillabyte components:prep [DIR]

 performs any necessary initialization for the component

 --directory DIR       # component directory
 --output_type OUTPUT_TYPE           # specify an output type i.e. json

``` 

### components:pull
``` bash 
$ zillabyte components:pull
Usage: zillabyte components:pull ID DIR

 pulls a component source to a directory.

 --force # pulls even if the directory exists
 --output_type OUTPUT_TYPE # specify an output type i.e. json
 --directory DIR # Directory of the component

 Examples:

 $ zillabyte components:pull 23 .

``` 
### components:results

``` bash 
$ zillabyte components:results
Usage: zillabyte components:results [ID] [RUN_ID]

 gets the result of an rpc request if it is done running, otherwise gets current run status

```

### components:rpc

``` bash 
$ zillabyte components:rpc
Usage: zillabyte components:rpc [ID] [INPUT_1,...] [INPUT_2,...], ...

 runs a component as an rpc

 --output_type OUTPUT_TYPE # specify an output type i.e. json

``` 

### components:status
``` bash 
$ zillabyte components:status
Usage: zillabyte components:status [DIR]

 fetches detailed status of the component

 --output_type OUTPUT_TYPE # specify an output type i.e. json
 --directory DIR # Directory of the component
```

### components:test

``` bash
$ zillabyte components:test
Usage: zillabyte components:test

 tests a local component with sample data

 --config CONFIG_FILE            # use the given config file
 --input INPUT_FILE              # uses a CSV for component input
 --output OUTPUT_FILE            # write output to a CSV
 --directory DIR                 # component directory

```




