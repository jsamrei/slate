
## Components

Components are reusable operations that can be integrated within applications or called on demand. See [Quickstart - Components](/quickstart/components) for an overview of components. 

``` bash
$ zillabyte help components
Usage: zillabyte components

 List custom components.

  components                           #  List custom components.
  components:delete ID                 #  Deletes a component. If the rpc is currently running, this command will kill it.
  components:errors ID                 #  Show recent errors generated by the componeny rpc.
  components:info [DIR]                #  Outputs the info for the component in the dir.
  components:init [NAME]               #  Initializes a new component.
  components:logs ID [OPERATION_NAME]  #  Streams logs for the component from our cluster.
  components:prep [DIR]                #  Performs any necessary initialization for the component.
  components:pull ID DIR               #  Pulls a component source to a directory.
  components:push [DIR]                #  Uploads a component.
  components:test                      #  Tests a local component with sample data.
```

### components:delete 

``` bash 
$ zillabyte help components:delete
Usage: zillabyte components:delete ID

 Deletes a component. If the rpc is currently running, this command will kill it.

 -f, --force                                 # Don't ask for confirmation
 ``` 

### components:errors 

``` bash 
$ zillabyte help components:errors
Usage: zillabyte components:errors ID

 Show recent errors generated by the component rpc.
``` 

### components:info 

``` bash 
$ zillabyte help components:info
Usage: zillabyte components:info [DIR]

 Outputs the info for the component in the dir.

 --pretty                                    # Pretty prints the info output
 --directory DIR                             # Component directory
``` 

### components:init

``` bash 
$ zillabyte help components:init
Usage: zillabyte components:init [NAME]

 Initializes a new component.

 --lang LANG                                 # Specify which language to use (ruby, python) [default: 'ruby']
 --dir DIR                                   # Target directory of the app
 --remote REMOTE                             # The git remote name [default: 'zillabyte']

 Examples:

 $ zillabyte components:init domain_extractor --lang ruby
``` 

### components:prep

``` bash 
$ zillabyte help components:prep
Usage: zillabyte components:prep [DIR]

 Performs any necessary initialization for the component.

 --directory DIR                             # Component directory
``` 

### components:pull
``` bash 
Usage: zillabyte components:pull ID DIR

 Pulls a component source to a directory.

 --force                                     # Pulls even if the directory exists
 --directory DIR                             # Component directory

 Examples:

 $ zillabyte components:pull 27 .
``` 

### components:push

``` bash
$ zillabyte help components:push
Usage: zillabyte components:push [DIR]

 Uploads a component.

 --config CONFIG_FILE                        # Use the given config file
 --directory DIR                             # Component directory

 Examples:

 $ zillabyte components:push .
```

### components:test

``` bash
$ zillabyte help components:test
Usage: zillabyte components:test

 Tests a local component with sample data.

 --config CONFIG_FILE                        # Use the given config file
 --input INPUT_FILE                          # Uses a CSV for component input
 --output OUTPUT_FILE                        # Write output to a CSV
 --directory DIR                             # Component directory
```

