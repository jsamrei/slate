---
title: CLI Reference Overview
---

## zillabyte CLI

The command line interface (CLI) is the primary way to interact with the Zillabyte infrastructure.  Details of each command can be viewed by running `zillabyte help COMMAND`.  The standalone `zillabyte help` command is also a quick way to see the available commands.

  ``` bash
$ zillabyte help
Usage: zillabyte COMMAND [command-specific-options]

Primary help topics, type "zillabyte help TOPIC" for more details:

  apps        #  manage custom apps
  components  #  manage custom components
  data        #  manage custom datasets
  query       #  executes queries
  rpc         #  remote procedure call a component

Additional topics:

  auth     #  manage zillabyte accounts
  git      #  manage git for apps
  help     #  list commands and display help
  keys     #  manage authentication keys
  repl     #  REPL console for zillabyte commands
  version  #  display version number

Type "zillabyte help aliases" for shortcuts to common commands. 
  ```

  To view more detailed descriptions of CLI functions, refer to the appropriate CLI Reference link.




### Aliases

The following aliases redirect to the commands to reduce keystrokes.

  ```bash
  $ zillabyte help aliases
Useful aliases: 

login           --> auth:login            #  Set the authentication token.
logout          --> auth:logout           #  Clear the authentication token.
datasets        --> data:list             #  Lists your custom datasets.
dataset         --> data:list             #  Lists your custom datasets.
relations       --> data:list             #  Lists your custom datasets.
download        --> data:pull             #  Pulls dataset into OUTPUT.gz.
errors          --> apps:errors           #  Show recent errors generated by the app.
                --> components:errors     #  Show recent errors generated by the component.
info            --> apps:info             #  Outputs the info for the app in the dir.
                --> components:info       #  Outputs the info for the component in the dir.
live_run        --> apps:live_run         #  Runs a local app with live data.
                --> components:live_run   #  Runs a local component with live data.
logs            --> apps:logs             #  Streams logs for the app from our cluster.
                --> components:logs       #  Streams logs for the component from our cluster.
prep            --> apps:prep             #  Performs any necessary initialization for the app.
                --> components:prep       #  Performs any necessary initialization for the component.
pull            --> apps:pull             #  Pulls a app source to a directory.
                --> components:pull       #  Pulls a component source to a directory.
push            --> apps:push             #  Uploads a app.
                --> components:push       #  Uploads a component.
test            --> apps:test             #  Tests a local app with sample data.
                --> components:test       #  Tests a local component with sample data.
sql             --> query:sql             #  Executes SQL queries against the zillabyte corpus.
sxp             --> query:sxp             #  Executes SXP queries against the zillabyte corpus.
execute         --> rpc:start             #  Starts the rpc and optionally submits the inputs from the command
rpc             --> rpc:start             #  Starts the rpc and optionally submits the inputs from the command
executes        --> rpc:start             #  Starts the rpc and optionally submits the inputs from the command
```

For detailed help on each alias, type `zillabyte help ALIAS`.

[HTML5 Boilerplate]: http://html5boilerplate.com/
[SMACSS]: http://smacss.com/
